library(quantmod)
getSymbols('SPY', from = '1-Jan-2015', to = '31-Dec-2017')
getSymbols('AAPL', from = '1-Jan-2015', to = '31-Dec-2017')
getSymbols('AAPL', from = '1-1-2015', to = '31-12-2017')
getSymbols('SPY', from = '1-1-2015', to = '31-12-2017')
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
getSymbols('SPY', from = '1-1-2015', to = '31-12-2017')
getSymbols('SPY', from = '1-1-2015', to = '31-12-2017')
getSymbols('SPY', from = '2015-1-1', to = '2017-12-31')
r = dailyReturn(SPY)
r = log(dailyReturn(SPY))
r = logReturn(SPY))
r = logReturn(SPY)
r = logReturn(SPY, type = 'log')
r = dailyReturn(SPY, type = 'log')
std(r)
sd(r)
av = sqrt(252)*std
std = sd(r)
av = sqrt(252)*std
acf(r)
nearPD(matrix(c(0.9, 0.8, 0.8, 0.8), nrow = 2))
library(Matrix)
nearPD(matrix(c(0.9, 0.8, 0.8, 0.8), nrow = 2))
#covar matrix, and number of variables
Sig = matrix(c(0.9, 0.8, 0.9, 0.8), nrow = 2)
sims = mvrnorm(n=100, mu = c(0.14, 0.05), Sigma = Sig)
library(MASS)
sims = mvrnorm(n=100, mu = c(0.14, 0.05), Sigma = Sig)
#covar matrix, and number of variables
Sig = matrix(c(0.9, 0.8, 0.9, 0.9), nrow = 2)
#covar matrix, and number of variables
Sig = matrix(c(0.9, 0.5, 0.9, 0.9), nrow = 2)
sims = mvrnorm(n=100, mu = c(0.14, 0.05), Sigma = Sig)
#covar matrix, and number of variables
Sig = matrix(c(0.2, 0.5, 0.9, 0.9), nrow = 2)
sims = mvrnorm(n=100, mu = c(0.14, 0.05), Sigma = Sig)
#covar matrix, and number of variables
Sig = matrix(c(0.2, 0.5, 0.9, 0.9), nrow = 2)
nearPD(Sog)
nearPD(Sig)
nearPD(Sig)$mat
print(nearPD(Sig)$mat)
print('Nearest PD Matrix:')
print(nearPD(Sig)$mat)
cat(nearPD(Sig)$mat)
print(nearPD(Sig)$mat)
matrix( c(2, 0.9,
0, 1),
nrow = 2)
x =matrix( c(2, 0.9,
0, 1),
nrow = 2)
nearPD(x)
x =matrix( c(2, 0.9,
0.9, 1),
nrow = 2)
nearPD(x)
corr_mat = matrix( c(1.0, 0.8, 0.2,
0.8, 1.0, 0.3,
0.2, 0.3, 1.0),
nrow = 3)
View(corr_mat)
diag(sd)
diag(sd, 3, 3)
diag(1, 3, 3)
sd * diag(1, 3, 3)
sd %*% diag(1, 3, 3)
sd %*% diag(1, 3, 3)
sd %*% sd #diag(1, 3, 3)
sd = matrix(c(2, 1, 0.5), nrow = 1)
sd %*% sd #diag(1, 3, 3)
sd %*% diag(1, 3, 3)
diag(1, 3, 3) %*% sd
sd %*% diag(1, 3, 3)
sd.T %*% diag(1, 3, 3)
diag(sd, 3, 3)
sd = array(c(2, 1, 0.5))
diag(sd, 3, 3)
sd = c(2, 1, 0.5)
diag(sd, 3, 3)
d %*% corr_mat %*% d
d = diag(sd, 3, 3)
d %*% corr_mat %*% d
d = diag(sd)
d
lm
lm(y~x1+x2)
gen_data <- function(formula, corr_mat, f_sd, f_mu, num_obs){
print(formual)
}
print(formula(y~x))
print(formula(y~x^2))
formula(y~x^2)
debugSource("C:/Users/leoma/Downloads/iml/clean_iml.R", echo=TRUE)
debugSource("C:/Users/leoma/Downloads/iml/clean_iml.R", echo=TRUE)
MSE_MEC_prop_seq
MSE_MEC_prop_seq
sum_df
debugSource("C:/Users/leoma/Downloads/iml/clean_iml.R", echo=TRUE)
predict(loess_j,ale_j$x.values)~ale_j$x.values
predict(loess_j,ale_j$x.values)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(ale_j$f.values~ale_j$x.values,
ylab = "ALE", xlab = expression(x[j]),
pch = 20, cex = 0.5)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
ale_j$x.values
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2
predict(loess_j,ale_j$x.values)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(ale_j$f.values~ale_j$x.values,
ylab = "ALE", xlab = expression(x[j]),
pch = 20, cex = 0.5)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
loess_j
plot(ale_j$f.values~ale_j$x.values,
ylab = "ALE", xlab = expression(x[j]),
pch = 20, cex = 0.5)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
gc()
debugSource("C:/Users/leoma/Downloads/iml/clean_iml.R", echo=TRUE)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
predict(loess_j,ale_j$x.values)~ale_j$x.values
loess_j
predict(loess_j,ale_j$x.values)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(ale_j$f.values~ale_j$x.values,
ylab = "ALE", xlab = expression(x[j]),
pch = 20, cex = 0.5)
lines(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
ale_j
predict(loess_j,ale_j$x.values)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values)
plot(predict(loess_j,ale_j$x.values)~ale_j$x.values,col = 2)
source("C:/Users/leoma/Downloads/iml/clean_iml.R", echo=TRUE)
stopCluster(cl)
registerDoSEQ()
#clear
rm(list = ls())
#clear
rm(list = ls())
